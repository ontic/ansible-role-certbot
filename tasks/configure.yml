# Copyright (c) Ontic. (http://www.ontic.com.au). All rights reserved.
# See the COPYING file bundled with this package for license details.

---

- name: 'Certbot | Create web root directories for storing challenges.'
  become: yes
  file:
    path: '{{ item.webroot }}'
    owner: '{{ item.webroot_owner | default(certbot_auto_renew_user) }}'
    state: 'directory'
    mode: '0755'
  with_items: '{{ certbot_named_certificates }}'

- name: 'Certbot | Determine whether a web server is running.'
  become: yes
  command: 'lsof -i :80'
  register: 'certbot_web_server_running'
  failed_when: false
  changed_when: false

- name: 'Certbot | Check whether certificates exists.'
  become: yes
  stat:
    path: '/etc/letsencrypt/live/{{ item.file_name }}/cert.pem'
  register: 'certbot_certificate_paths'
  with_items: '{{ certbot_named_certificates }}'

- name: 'Certbot | Count the number of missing certificates.'
  set_fact:
    certbot_missing_certificate_count: '{{ certbot_certificate_paths.results | selectattr("stat", "defined") | map(attribute="stat") | selectattr("exists", "equalto", false) | list | length }}'

- name: 'Certbot | Stop web server before generating certificates.'
  become: yes
  service:
    name: '{{ certbot_web_server_service_name }}'
    state: 'stopped'
  when:
    - 'certbot_missing_certificate_count | int > 0'
    - 'certbot_web_server_running.rc == 0'

- name: 'Certbot | Generate standalone certificates.'
  become: yes
  command: '{{ certbot_script }} certonly --standalone --email {{ item.1.email }} -n --agree-tos --keep -d {{ item.1.domains|join(",") }}'
  when: 'not certbot_certificate_paths.results[item.0].stat.exists'
  with_indexed_items: '{{ certbot_named_certificates }}'

- name: 'Certbot | Start web server after generating certificates.'
  become: yes
  service:
    name: '{{ certbot_web_server_service_name }}'
    state: 'started'
  when:
    - 'certbot_missing_certificate_count | int > 0'
    - 'certbot_web_server_running.rc == 0'

- name: 'Certbot | Update certificate renewal options.'
  become: yes
  ini_file:
    dest: '/etc/letsencrypt/renewal/{{ item.0.file_name }}.conf'
    section: '{{ item.1.section }}'
    option: '{{ item.1.option }}'
    value: '{{ item.1.value }}'
    owner: 'root'
    group: 'root'
    mode: '0644'
    create: no
  with_nested:
    - '{{ certbot_named_certificates }}'
    - '{{ certbot_renewal_options }}'

- name: 'Certbot | Clear certificate webroot map.'
  become: yes
  ini_file:
    dest: '/etc/letsencrypt/renewal/{{ item.file_name }}.conf'
    section: '[webroot_map]'
    state: 'absent'
    owner: 'root'
    group: 'root'
    mode: '0644'
    create: no
  changed_when: false
  with_items: '{{ certbot_named_certificates }}'

- name: 'Certbot | Create certificate webroot map.'
  become: yes
  ini_file:
    dest: '/etc/letsencrypt/renewal/{{ item.0.file_name }}.conf'
    section: '[webroot_map]'
    option: '{{ item.1 }}'
    value: '{{ item.0.webroot }}'
    owner: 'root'
    group: 'root'
    mode: '0644'
    create: no
  changed_when: false
  with_subelements:
    - '{{ certbot_named_certificates }}'
    - 'domains'

- name: 'Certbot | Update certificates not previously created.'
  become: yes
  command: '{{ certbot_script }} certonly --webroot --cert-name {{ item.1.file_name }} -n -d {{ item.1.domains|join(",") }} -w {{ item.1.webroot }}'
  register: 'certbot_certificate_update'
  notify: 'reload web server'
  when: 'certbot_certificate_paths.results[item.0].stat.exists'
  with_indexed_items: '{{ certbot_named_certificates }}'
  changed_when: '"Your certificate and chain have been saved" in certbot_certificate_update.stdout'

- name: 'Certbot | Add cron job for automatic renewal.'
  become: yes
  cron:
    name: 'Certbot automatic renewal'
    job: '{{ certbot_script }} {{ certbot_auto_renew_command }}'
    minute: '{{ certbot_auto_renew_minute }}'
    hour: '{{ certbot_auto_renew_hour }}'
    user: '{{ certbot_auto_renew_user }}'
    state: '{{ certbot_auto_renew | ternary("present", "absent") }}'
